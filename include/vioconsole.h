/* vioconsole.h  - diplay faudes console out */


/*
   Graphical IO for FAU Discrete Event Systems Library (libfaudes)

   Copyright (C) 2010 Thomas Moor

*/


#ifndef FAUDES_VIOCONSOLE_H
#define FAUDES_VIOCONSOLE_H


#include "viostyle.h"



/*
 *****************************************************
 *****************************************************

 VioFindDialog
 
 Quick hack for a find dialog ... this should be extended
 to be reusable.

 *****************************************************
 *****************************************************
 */

class VIODES_API VioFindDialog : public QDialog {
  Q_OBJECT

public:

  // construct
  VioFindDialog(QWidget *parent = 0);

  // config
  void Replace(bool on);

  // acess values
  QString Pattern(void);
  QString Replace(void);
  bool CaseSensitive(void);
  bool FromStart(void);
  bool Backward(void);
  bool ReplaceFlag(void) { return mReplaceFlag; };
  QTextDocument::FindFlags Flags(void);

public slots:
  // reimplement
  virtual void accept(void);


protected:

  bool mReplaceFlag;

  // my layout
  QVBoxLayout* mVbox;

 
  // my layout items
  QLineEdit *mPatternEdit;
  QLineEdit *mReplaceEdit;
  QWidget* mReplaceLine;
  QCheckBox *mCaseCheck;
  QCheckBox *mBackwardCheck;
  QCheckBox *mFromStartCheck;
  QPushButton *mFindButton;
  QPushButton *mReplaceButton;
  QPushButton *mCancelButton;

  // reimplementcd 
  virtual void showEvent(QShowEvent * event);
};


/*
 *****************************************************
 *****************************************************

 The VioFaudesLogger is derievd from faudes::ConsoleOut
 to buffer all faudes console output. 

 ******************************************************
 ******************************************************
 */

class VIODES_API VioFaudesLogger : public QObject, public faudes::ConsoleOut{

Q_OBJECT

public:
  // singleton access
  static VioFaudesLogger* G(void);

  // explict destructor
  static void Destruct(void);

signals:
  // notify new line
  // tech: we emit the "Alt" version if we are not in the main ui thread
  void NotifyAppend(QString message);
  void NotifyAltAppend(QString message);

private:
  // construct/destruct
  VioFaudesLogger(QObject* parent=0);
  virtual ~VioFaudesLogger();

protected:

  // reimplement faudes dowrite
  void DoWrite(const std::string& message, long int cntnow, long int cntdone);

  // single instance
  static VioFaudesLogger* mpVInstance;

};


/*
 *****************************************************
 *****************************************************

 A VioConsoleHighlighter is a highlighter for the 
 faudes error console

 *****************************************************
 *****************************************************
 */


class VIODES_API VioConsoleHighlighter : public QSyntaxHighlighter {

Q_OBJECT

public:

  // construct/destruct
  VioConsoleHighlighter(QTextDocument *parent = 0);
  ~VioConsoleHighlighter(void) {};

protected:
  
  // highlight re-implementation 
  void highlightBlock(const QString &text);

private:

  // my highlighting rules
  struct HighlightingRule {
    QRegExp pattern;
    QTextCharFormat format;
  };
  QVector<HighlightingRule> mHighlightingRules;

  // styles
  QTextCharFormat mLabelFormat;
  QTextCharFormat mRedFormat;
  QTextCharFormat mPromptFormat;


};


/*
 *****************************************************
 *****************************************************

 A VioConsoleWidget is a widget that display faudes
 console output. It uses the faudes ConsoleOut Hook
 to grab all output generated by faudes functions.
 
 *****************************************************
 *****************************************************
 */

class VIODES_API VioConsoleWidget : public QWidget {

Q_OBJECT

public:

  // construct/destruct
  VioConsoleWidget(QWidget *parent = 0);
  virtual ~VioConsoleWidget(void);

  // configure
  void BufferSize(int max);


public slots:

  // append faudes console message
  void AppendFaudes(QString message);

  // clear all
  void Clear(void);

  // reset lua state
  void Reset(void);

  // copy to clippboard
  void Copy(void);
  void Cut(void);
  void Paste(void);

  // find
  void Find(const QString& pattern, QTextDocument::FindFlags flags = 0);
  void FindAgain(void);
  void FindDialog(void);


protected:

  // navigation helpers
  void AppendPrompt(void);
  void AppendNewLine(void);
  void RemoveLastLine(void);
  void AppendPlain(const QString& txt);
  void Execute(void);
  void Complete(void);
  QTextCursor mPrePrompt;
  QTextCursor mPostPrompt;
  QList<QString> mHistory;
  int mHistoryCurrent;

  // actual console
  QPlainTextEdit* mConsoleText;

  // overall Layout
  QVBoxLayout* mVbox;

  // my serach pattern
  QString mFindPattern;
  QTextDocument::FindFlags mFindFlags;

  // my find dialog
  VioFindDialog* mFindDialog;

  // track keypress
  void keyPressEvent(QKeyEvent * e);
  bool eventFilter(QObject * watched, QEvent *event);

};




/*
 ************************************************
 ************************************************

 The VioConsoleEvaluate class provides evaluation
 of a console command in a thread to keep the 
 main event loop alive. 

 ************************************************
 ************************************************
 */


// class definition
class VioConsoleEvaluate : public QThread  {

  Q_OBJECT

public:

  // construct/destruct
  VioConsoleEvaluate(QString command);
  ~VioConsoleEvaluate(void);


public slots:
  // execute, call from application
  QString Execute(void);



private:
  // start() thread calls run
  void run(void);

  // operation reference
  QString mCommand;  
  QString mErrStr;  

};


#endif
